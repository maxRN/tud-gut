---
import RoomCard from "../components/RoomCard.svelte";
import Layout from "../layouts/Layout.astro";
import type { Room } from "../timeAndDate";

type BuildingWithRooms = {
    building: string;
    rooms: string[];
};

export async function getStaticPaths() {
    const BACKEND_URL = import.meta.env.BACKEND_URL;

    async function fetchBuildings() {
        console.log(BACKEND_URL + "/info");
        const res = await fetch(BACKEND_URL + "/info");
        const buildings: string[] = await res.json();
        return buildings;
    }

    async function fetchRoomsForBuilding(building: string) {
        const res = await fetch(BACKEND_URL + "/rooms/" + building);
        const rooms: Room[] = await res.json();

        return rooms;
    }

    const buildings = await fetchBuildings();
    console.log("buildings: ", buildings);

    let allRooms: BuildingWithRooms[] = [];
    await Promise.all(
        buildings.map(async (building) => {
            const rooms = await fetchRoomsForBuilding(building);
            const newBuildingInfo: BuildingWithRooms = {
                building: "test",
                rooms: [],
            };

            newBuildingInfo.building = building;
            rooms.forEach((room) => {
                newBuildingInfo.rooms.push(room.Name);
            });
            allRooms.push(newBuildingInfo);
        })
    );

    return allRooms.map((buildingWithInfo) => ({
        params: { building: buildingWithInfo.building },
        props: { buildingWithInfo: buildingWithInfo },
    }));
}

interface Props {
    buildingWithInfo: BuildingWithRooms;
}

const { buildingWithInfo } = Astro.props;
---

<Layout title={buildingWithInfo.building}>
    <main>
        <h1>
            <a href={"/"}>Home</a> / <span class="text-gradient"
                >{buildingWithInfo.building}</span
            >
        </h1>
        {
            buildingWithInfo.rooms.map((name) => {
                const room: Room = {
                    Name: name,
                    Building: buildingWithInfo.building,
                };
                return <RoomCard room={room} />;
            })
        }
    </main>
</Layout>

<style>
    a {
        color: black;
    }
    a:visited {
        color: black;
    }
    ul {
        color: black;
    }
    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
    main {
        padding: 1.5rem;
        max-width: 60ch;
    }
    h1 {
        font-size: 3rem;
        font-weight: 800;
        margin: 0;
    }
    a {
        text-decoration: underline;
        color: black;
    }
    a:visited {
        color: black;
    }
</style>
